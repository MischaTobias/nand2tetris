// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	 static Array ram, heap, end;

    /** Initializes the class. */
    function void init() {
    	let ram = 0;				// for peek and poke only
    	let heap = 2048;			// base heap address
    	let end = heap;			// keep track of last segment
    	let heap[0] = 14335;		// initial segment size
    	let heap[1] = 0;			// next segment
    	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
    	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
    	let ram[address] = value;
    	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int segment, block;
		let segment = heap;
		while (~(segment = 0)) {
			// if block found
			if (segment[0] > (size + 1)) {
				let block = segment + (segment[0] - size) + 1;
				let block[-1] = size + 1;
				let segment[0] = segment[0] - (size + 1);
				let segment = 0;		// break out of while
			}
			else {
				let segment = segment[1];
			}
		} 
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
		let obj[0] = 0;			// set next to null
		let end[1] = obj - 1;	// append to the end
		let end = end[1];			// set new end
    	return;
    }    
}
