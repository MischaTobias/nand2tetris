// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	 static Array twoToThe;

    /** Initializes the library. */
    function void init() {
    	var int i, shifted;
    	let shifted = 1;
    	let twoToThe = Array.new(16);
    	// initialize array with the powers of 2
    	while ( i < 16 ) {
    		let twoToThe[i] = shifted;
    		let shifted = shifted + shifted;
    		let i = i + 1;
    	}
    	return;
    }

	/** Helper function, returns y's i-th bit. */
	function boolean bit(int y, int i) {
		return y & twoToThe[i];
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
    	if ( x < 0 ) { let x = -x; }
    	return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	var int i, sum, shiftedX;
    	let shiftedX = x;
    	while ( i < 16 ) {
    		if ( Math.bit(y, i) ) { let sum = sum + shiftedX; }
    		let shiftedX = shiftedX + shiftedX;
    		let i = i + 1;
    	}
    	return sum;
    }

	 /** Wrapper function for divide operation. */
	 function int divide(int x, int y) {
		var boolean negative;
		var int result;
	 	if (( x < 0 ) | ( y < 0 )) {
	 		let x = Math.abs(x);
	 		let y = Math.abs(y);
	 		let negative = true;
	 	}
	 	let result = Math.divideRec(x, y);
	 	if ( negative ) { let result = -result; }
	 	return result;
	 }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divideRec(int x, int y) {
    	var int q;
    	if (( y > x ) | ( y < 0 )) { return 0; }
    	let q = Math.divideRec ( x, y + y );
    	if ( x - (( q + q ) * y ) < y ) { 
    		return q + q;
    	} else { 
    		return q + q + 1;
    	} 
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	var int y, j, res;
    	let j = 7;
    	while (~(j < 0 )) {
    		let res = ((y + twoToThe[j]) * (y + twoToThe[j]));
    		if ((( res < x ) | ( res = x )) & res > 0) {
    			let y = y + twoToThe[j];
    		}
    		let j = j - 1;
    	}
    	return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    	if ( a > b ) { return a; }
    	else { return b; }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	if ( a < b ) { return a; }
    	else { return b; }
    }
}
